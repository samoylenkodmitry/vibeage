/**
 * This file contains helper functions to process the ticks generated by the EffectRunner
 * and apply them to entities in the game world.
 */
import { EffectTick } from '../../../shared/effectsDefinition.js';
import { log, LOG_CATEGORIES } from '../../logger.js';

// Application functions for different effect types
const effectHandlers = {
  damage: (value: number, target: any) => {
    if (!target || target.health === undefined) return false;
    
    const oldHealth = target.health;
    target.health = Math.max(0, target.health - value);
    
    log(LOG_CATEGORIES.DAMAGE, `Entity ${target.id} took ${value} damage from status effect. Health: ${oldHealth} -> ${target.health}`);
    
    // Check if target died
    if (target.health <= 0 && target.isAlive) {
      target.health = 0;
      target.isAlive = false;
      target.deathTimeTs = Date.now();
      if (target.targetId) target.targetId = null;
      
      log(LOG_CATEGORIES.DAMAGE, `Entity ${target.id} was killed by status effect`);
      return true; // Entity died
    }
    
    return false; // Entity didn't die
  },
  
  healing: (value: number, target: any) => {
    if (!target || target.health === undefined || target.maxHealth === undefined) return false;
    
    // Only apply healing if the target is alive
    if (!target.isAlive) return false;
    
    const oldHealth = target.health;
    target.health = Math.min(target.maxHealth, target.health + value);
    
    log(LOG_CATEGORIES.HEALING, `Entity ${target.id} healed for ${value} from status effect. Health: ${oldHealth} -> ${target.health}`);
    
    return false; // No entity died from healing
  },
  
  mana: (value: number, target: any) => {
    if (!target || target.mana === undefined || target.maxMana === undefined) return false;
    
    const oldMana = target.mana;
    target.mana = Math.min(target.maxMana, Math.max(0, target.mana + value));
    
    log(LOG_CATEGORIES.MANA, `Entity ${target.id} mana change by ${value} from status effect. Mana: ${oldMana} -> ${target.mana}`);
    
    return false; // No entity died from mana change
  },
  
  stat: () => {
    // Stat modifications would go here
    // For now, we don't implement actual stat modifications
    return false;
  }
};

/**
 * Apply an effect tick to an entity
 * @param tick The effect tick to apply
 * @param target The target entity
 * @returns Whether the entity died from this tick
 */
export function applyEffectTick(tick: EffectTick, target: any): boolean {
  const handler = effectHandlers[tick.type];
  if (!handler) {
    console.error(`No handler found for effect type: ${tick.type}`);
    return false;
  }
  
  return handler(tick.value, target);
}
